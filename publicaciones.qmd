---
title: "Publicaciones con referato"
format: html
engine: python3
execute:
    enabled: true
    echo: false
--- 

```{python}
from pybtex.database import parse_file
from pybtex.plugin import find_plugin
from pybtex.backends.html import Backend 
from collections import defaultdict

def corregir_latex(cadena):
    # Diccionario con las sustituciones de LaTeX a Unicode
    sustituciones = {
        "{\\'a}": "á", 
        "{\\'e}": "é",
        "{\\'i}": "í",
        "{\\'o}": "ó",
        "{\\'u}": "ú", 
        "{\\'A}": "Á",
        "{\\'E}": "É",
        "{\\'I}": "Í", 
        "{\\'O}": "Ó",  
        "{\\'U}": "Ú",
        "{\\~n}": "ñ", 
        "{\\~N}": "Ñ",
        "{\\\"u}": "ü",
        "{\\\"U}": "Ü"
    }
 
    # Reemplazar cada ocurrencia en la cadena
    for latex, unicode in sustituciones.items():
        cadena = cadena.replace(latex, unicode)

    return cadena

def eliminar_llaves(cadena):
    # Elimina todas las llaves '{' y '}' 
    return cadena.replace('{', '').replace('}', '')

def eliminar_barra(cadena):
    # Elimina todas las barras '\' y '/' 
    return cadena.replace('\\', '').replace('/', '')

def reemplazar_ultimo_punto_coma(cadena): 
    # Verifica si hay un ';' en la cadena
    if ';' in cadena:
        # Reemplaza el último ';' por ' y' 
        cadena = cadena.rsplit(';', 1)  # Divide desde el último ';'
        return ' y'.join(cadena)  # Une de nuevo con ' y'
    return cadena 

# Función para cargar el archivo BibTeX usando pybtex   
def load_bibtex(file): 
    bib_data = parse_file(file)
    return bib_data.entries

# Función para agrupar publicaciones por año
def group_by_year(entries):
    grouped = defaultdict(list) 
    for key, entry in entries.items(): 
        if entry.type != 'article':
            continue
        year = entry.fields.get('year', 'Sin año')
        grouped[year].append(entry)
    return dict(sorted(grouped.items(), reverse=True))  # Ordenar por año descendente

# Función para formatear la referencia en el formato deseado
def format_reference(entry):
    # Obtener los autores
    authors = '; '.join(str(person) for person in entry.persons.get('author', []))
    authors = corregir_latex(authors)
    authors = eliminar_llaves(authors)
    authors = reemplazar_ultimo_punto_coma(authors)
    
    # Obtener los campos restantes
    title = entry.fields.get('title', 'Título desconocido')
    journal = entry.fields.get('journal', 'Revista desconocida')
    journal = eliminar_barra(journal)
    journal = eliminar_llaves(journal)
    volume = entry.fields.get('volume', '')  # Volumen puede no estar presente
    number = entry.fields.get('number', '')  # Número puede no estar presente
    pages = entry.fields.get('pages', '')    # Páginas pueden no estar presentes 
    doi = entry.fields.get('doi', '')    # Páginas pueden no estar presentes

    # Construir el formato
    reference = f"{authors}, «<i>{title}</i>», <b>{journal}</b>, {volume}" 
    
    # Agregar el número y las páginas si están presentes
    if number:
        reference += f"({number})"
    if pages:
        reference += f", {pages}"
    reference += "."
    if doi:
        reference += f' <a href="https://doi.org/{doi}" target="_blank"><i class="ai ai-doi"></i></a>'
    return reference

# Función para generar la lista de publicaciones con numeración inversa
def generate_publications_list(grouped_entries):
    publications = []
    count = sum(len(v) for v in grouped_entries.values())  # Contar total de publicaciones
    for year, entries in grouped_entries.items():
        publications.append(f"<h3>{year}</h3>")  # Encabezado del año como HTML
        for entry in entries:
            citation = f"<p>{count}. {format_reference(entry)}</p>"
            publications.append(citation)
            count -= 1
    return "\n".join(publications) + '<ul>'

# Cargar y procesar las publicaciones
entries = load_bibtex('../cv/publicaciones.bib')
grouped_entries = group_by_year(entries) 

# Mostrar la lista de publicaciones como HTML
from IPython.display import display, HTML
css = """
<style>

  /* Social links a
  .social-links a {
      margin-right: 10px;
      text-decoration: none;
      color: inherit;
  }

  /* Social links i
  .social-links i {
      margin-right: 5px;
      font-size: 1.5em;
  }
</style>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/jpswalsh/academicons/css/academicons.min.css">

"""
publications_list = css + generate_publications_list(grouped_entries)
display(HTML(publications_list))

```

